generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id              Int        @id @default(autoincrement())
  title           String
  content         String     @db.Text
  summary         String?    @db.Text
  cover           String?    @db.Text
  slug            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  enableComments  Boolean    @default(true)
  status          PostStatus @default(DRAFT)
  likes           Int?        @default(0)
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  author          User       @relation(fields: [authorId], references: [id])
  authorId        String
  categories      Category[]
  tags            Tag[]
  //comments        Comment[]
  //likes           Like[]
  //views           PostViews?
  //galleries       Gallery[]
  // published       Boolean   @default(false)
  // metaKeywords String?
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Tag {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String?
  posts       Post[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  slug        String?
  posts       Post[]
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  posts         Post[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
